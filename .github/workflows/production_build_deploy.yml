name: Production Build And Deploy

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: wavit2
  DOCKERHUB_IMAGE_NAME: wavit-server

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 21 버전으로 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # Gradlew 실행 허용
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      # Gradle 빌드
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      # Gradle 빌드
      - name: Build with Gradle
        id: gradle
        run: ./gradlew build

      # Dockerhub 로그인
      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # Docker 메타데이터 추출
      - name: Extract Docker metadata
        id: metadata
        uses: docker/metadata-action@v5.5.0
        env:
          DOCKERHUB_IMAGE_FULL_NAME: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}
        with:
          images: ${{ env.DOCKERHUB_IMAGE_FULL_NAME }}
          tags: |
            type=sha,prefix=

      # 멀티 아키텍처 지원을 위한 QEMU 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 도커 확장 빌드를 위한 Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker 이미지 빌드 및 도커허브로 푸시
      - name: Docker Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64/v8
          push: true
          tags: ${{ steps.metadata.outputs.tags }}

      # EC2로 배포
      - name: Deploy to EC2 Server
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_FULL_URL: ${{ steps.metadata.outputs.tags }}
          DOCKERHUB_IMAGE_NAME: ${{ env.DOCKERHUB_IMAGE_NAME }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: IMAGE_FULL_URL, DOCKERHUB_IMAGE_NAME # docker-compose.yml 에서 사용할 환경 변수
          script: |
            echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
            docker compose up -d
            docker image prune -a -f
